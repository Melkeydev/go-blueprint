package server

	import (
		"net/http"

		"github.com/labstack/echo/v4"
		"github.com/labstack/echo/v4/middleware"
    {{.AdvancedTemplates.TemplateImports}}
	)
func (s *Server) RegisterRoutes() http.Handler {
	e := echo.New()
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
  {{.AdvancedTemplates.TemplateRoutes}}

	e.GET("/", s.HelloWorldHandler)
  {{if ne .DBDriver "none"}}
	e.GET("/health", s.healthHandler)
  {{end}}
  {{if .AdvancedOptions.Websocket}}
	e.GET("/websocket", s.websocketHandler)
  {{end}}

	return e
}

func (s *Server) HelloWorldHandler(c echo.Context) error {
	resp := map[string]string{
		"message": "Hello World",
	}

	return c.JSON(http.StatusOK, resp)
}

{{if ne .DBDriver "none"}}
func (s *Server) healthHandler(c echo.Context) error {
	return c.JSON(http.StatusOK, s.db.Health())
}
{{end}}

{{if .AdvancedOptions.Websocket}}
func (s *Server) websocketHandler(c echo.Context) {
	w := c.Response().Writer
	r := c.Request()
	errorMessage := []byte("This is another message not PING")
	socket, err := websocket.Accept(w, r, nil)

	if err != nil {
		log.Print("could not open websocket")
		_, _ = w.Write([]byte("could not open websocket"))
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	defer socket.Close(websocket.StatusGoingAway, "server closing websocket")

	ctx := r.Context()
	for {
		msgType, socketBytes, err := socket.Read(ctx)

		if err != nil {
			log.Print("could not read from websocket")
			return
		}

		if string(socketBytes) == "PING" {
			if err := socket.Write(ctx, msgType, []byte("PONG")); err != nil {
				log.Print("could not write to socket")
				return
			}
			continue
		}

		if err := socket.Write(ctx, msgType, errorMessage); err != nil {
			log.Print("could not write to socket")
			return
		}
	}
}
{{end}}
