package server

import (
  {{if .AdvancedOptions.Websocket}}
	"log"
  {{end}}
	"github.com/gofiber/fiber/v2"
  {{.AdvancedTemplates.TemplateImports}}
)

func (s *FiberServer) RegisterFiberRoutes() {
	s.App.Get("/", s.HelloWorldHandler)
  {{if ne .DBDriver "none"}}
	s.App.Get("/health", s.healthHandler)
  {{end}}
  {{if .AdvancedOptions.Websocket}}
	s.App.Get("/websocket", websocket.New(s.websocketHandler))
  {{end}}

  {{.AdvancedTemplates.TemplateRoutes}}
}

func (s *FiberServer) HelloWorldHandler(c *fiber.Ctx) error {
	resp := fiber.Map{
		"message": "Hello World",
	}

	return c.JSON(resp)
}

{{if ne .DBDriver "none"}}
func (s *FiberServer) healthHandler(c *fiber.Ctx) error {
	return c.JSON(s.db.Health())
}
{{end}}

{{if .AdvancedOptions.Websocket}}
func (s *FiberServer) websocketHandler(con *websocket.Conn) {
	ctx, cancel := context.WithCancel(context.Background())

	go func() {
		for {
			_, _, err := con.ReadMessage()
			if err != nil {
				cancel()
				log.Println("Receiver Closing", err)
				break
			}
		}
	}()

	for {
		select {
		case <-ctx.Done():
			return
		default:
			payload := fmt.Sprintf("server timestamp: %d", time.Now().UnixNano())
			if err := con.WriteMessage(websocket.TextMessage, []byte(payload)); err != nil {
				log.Print("could not write to socket")
				return
			}
			time.Sleep(time.Second * 2)
		}
	}
}
{{end}}
