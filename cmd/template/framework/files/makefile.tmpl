# Simple Makefile for a Go project

# Build the application
all: build

build:
	@echo "Building..."
	{{if or ( .AdvancedOptions.htmx ) ( .AdvancedOptions.tailwind )}}@templ generate{{end}}
	{{if .AdvancedOptions.tailwind}}@tailwindcss -i cmd/web/assets/css/input.css -o cmd/web/assets/css/output.css{{end}}
	{{if .UnixBased }}@go build -o main cmd/api/main.go{{ else }}@go build -o main.exe cmd/api/main.go{{ end }}

# Run the application
run:
	@go run cmd/api/main.go

{{if and (ne .DBDriver "none") (ne .DBDriver "sqlite")}}
# Create DB container
docker-run:
	@if docker compose up 2>/dev/null; then \
		: ; \
	else \
		echo "Falling back to Docker Compose V1"; \
		docker-compose up; \
	fi

# Shutdown DB container
docker-down:
	@if docker compose down 2>/dev/null; then \
		: ; \
	else \
		echo "Falling back to Docker Compose V1"; \
		docker-compose down; \
	fi
{{end}}

# Test the application
test:
	@echo "Testing..."
	@go test ./... -v

{{if and (ne .DBDriver "none") (ne .DBDriver "sqlite")}}
# Integrations Tests for the application
itest:
	@echo "Running integration tests..."
	@go test ./internal/database -v
{{end}}

# Clean the binary
clean:
	@echo "Cleaning..."
	@rm -f main

# Live Reload
{{if .UnixBased}}
watch:
	@if command -v air > /dev/null; then \
            air; \
            echo "Watching...";\
        else \
            read -p "Go's 'air' is not installed on your machine. Do you want to install it? [Y/n] " choice; \
            if [ "$$choice" != "n" ] && [ "$$choice" != "N" ]; then \
                go install github.com/air-verse/air@latest; \
                air; \
                echo "Watching...";\
            else \
                echo "You chose not to install air. Exiting..."; \
                exit 1; \
            fi; \
        fi
{{else}}
watch:
	@air
{{end}}

.PHONY: all build run test clean watch
