package database

import (
	"context"
	"fmt"
	"os"
	"strconv"
	"time"

	"github.com/go-redis/redis/v8"
	_ "github.com/joho/godotenv/autoload"
)

type Service interface {
	Health() (map[string]string, error)
}

type service struct {
	db *redis.Client
}

var (
	address  = os.Getenv("DB_ADDRESS")
	port     = os.Getenv("DB_PORT")
	password = os.Getenv("DB_PASSWORD")
	database = os.Getenv("DB_DATABASE")
)

func New() (Service, error) {
	num, err := strconv.Atoi(database)
	if err != nil {
		return nil, fmt.Errorf("database incorrect: %w", err)
	}

	fullAddress := fmt.Sprintf("%s:%s", address, port)

	rdb := redis.NewClient(&redis.Options{
		Addr:     fullAddress,
		Password: password,
		DB:       num,
	})

	s := &service{db: rdb}

	return s, nil
}

func (s *service) Health() (map[string]string, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	result, err := s.db.Ping(ctx).Result()
	if err != nil {
		return nil, fmt.Errorf("db down: %w", err)
	}
	if result != "PONG" {
		return nil, fmt.Errorf("unexpected ping response: %s", result)
	}

	return map[string]string{
		"message": "It's healthy",
	}, nil
}