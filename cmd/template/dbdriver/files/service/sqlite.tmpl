package database

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"time"

	_ "github.com/mattn/go-sqlite3"
	_ "github.com/joho/godotenv/autoload"
)

type Service interface {
	Health() (map[string]string, error)
}

type service struct {
	db *sql.DB
}

var (
	dburl = os.Getenv("DB_URL")
)

func New() Service {
	db, err := sql.Open("sqlite3", dburl)
	if err != nil {
		panic(fmt.Errorf("error connecting to db: %w", err))
	}
	db.SetConnMaxLifetime(0)
	db.SetMaxIdleConns(50)
	db.SetMaxOpenConns(50)
	return &service{
		db: db,
	}
}

func (s *service) Health() (map[string]string, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()
	err := s.db.PingContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("error pinging db: %w", err)
	}
	return map[string]string{
		"message": "It's healthy",
	}, nil
}